// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ApplicationStatus {
  REQUEST_SUBMITTED
  DRAFT_REQUEST
  PROCESSING
  APPROVED
}

enum FileStatus {
  INACTIVE
  ACTIVE
}

model User {
  Id           Int          @id @default(autoincrement())
  Email     String       @unique
  PasswordHash String
  Role         Role         @default(USER)
  CreatedAt    DateTime     @default(now())
  UpdatedAt    DateTime     @default(now()) @updatedAt
  Application  Application?

  @@map("User")
}

model Application {
  Id                        Int               @id @default(autoincrement())
  UserId                    Int               @unique
  Status                    ApplicationStatus @default(REQUEST_SUBMITTED)
  // form 1
  TravelPurpose             String?
  SpecificPurpose           String?
  // form-2
  LastName                  String?
  BirthName                 String?
  FirstName                 String?
  Gender                    String?
  DOB                       String?
  POB                       String?
  Country                   String?           @default("Bangladesh")
  Address                   String?
  Phone                     Int?
  PassportIssueCountry      String?           @default("Bangladesh")
  OriginalCitizenship       String?           @default("Bangladesh")
  MaritalStatus             String?
  FathersFirstName          String?
  MothersFirstName          String?
  Email                     String?
  // form 3
  TravelDocumentType        String?
  DocumentNumber            String?
  POITD                     String?
  IssueDate                 String?
  ExpiryDate                String?
  // form 4
  ArrivalDate               String?
  DepartureDate             String?
  HostName                  String?
  HostPhone                 Int?
  HostAddress               String?
  HostEmail                 String?
  Municipality              String?
  Settlement                String?
  Street                    String?
  houseNumber               String?
  // form 5
  FacePhoto                 String?
  DocumentFirstPage         String?
  InvitationLetter          String?
  CertificateOfRegistration String?
  EmploymentContract        String?
  ExtractFrom               String?
  Diploma                   String?
  Additional1               String?
  Additional2               String?
  CreatedAt                 DateTime          @default(now())
  UpdatedAt                 DateTime          @default(now()) @updatedAt
  User                      User              @relation(fields: [UserId], references: [Id], onDelete: Cascade)

  @@map("Application")
}

model File {
  Id            Int         @id @default(autoincrement())                    
  UserId        Int?                                       
  Status        FileStatus  @default(INACTIVE)            
  FileableId    Int?                                      
  FileableType  String?                                    
  Collection    String?                                   
  Identifier    String?                                    
  Path          String                                    
  Extension     String                                    
  FileName      String?                                   
  CreatedAt     DateTime    @default(now())               
  UpdatedAt     DateTime    @default(now()) @updatedAt                   

  // Your original indexes
  @@index([FileableType, FileableId, Identifier],   map: "IDX_files_fileable")
  @@index([FileableType, FileableId, Collection],   map: "IDX_files_coll_ident")

  // Helpful for common reads (optional)
  @@index([FileableType, FileableId, Status])
}